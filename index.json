[
  {
    "content": "This article explains about how to build a website using Hugo and host it in GitHub-Pages\nIntroduction In this article, I will take you all step by step to build a website using Hugo and host it using GitHub Pages\nFor any developer out there, having a website is a great way to share knowledge to the outside world. Prerequisites Hugo needs to be installed in your machine Installation Steps of hugo Knowledge of working with Github is required What is Hugo ? Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. The nicest thing is that , it helps you to build a website by writing your content in mark down. More info about Hugo can be found in this link Let’s Build a Website using Hugo The steps are clearly defined in this Hugo Getting Started section\nStep 1: Install Hugo First verify hugo installed in the machine.\nhugo version Install hugo by running this command. I am going to explain cover the hugo installation using mac in this article.\nbrew install hugo Using Windows or any other OS then please refer this link Step 2: Create a Project Template Now let’s create a template for the hugo website by running the below command.\nhugo new site mywebsite Note: mywebsite is the name of the project. It could be any name you wish for your project. You should have a project structure like below.\nStep 3: Install a Theme Themes are necessary for any website that we build using Hugo because it defines the layout of the website.\nYou can find all different themes in this link\nIn this article, I am going to demonstrate how to use Relearn theme.\nWhy Relearn Theme ? I really like the Relearn theme because it performs the text search across the whole content of the project It has a very nice Hierarchical structure in which you can nest multiple topics You can add a topic and add multiple subtopics under a topic which aligns very nicely for the user to navigate through the topics step by step Note : This website is built using the Relearn theme.\nLet’s install theme in our project Run the below commands to install the Relearn theme\ncd mywebsite git init git submodule add https://github.com/McShelby/hugo-theme-relearn.git themes/re-learn You should notice the re-learn folder under the themes directory after the above command is executed.\nOpen the config.toml file and add the theme property to it like below.\nThe value should match the folder name under themes directory In this case it’s re-learn config.toml file should be like below.\nbaseURL = 'http://example.org/' languageCode = 'en-us' title = 'My New Hugo Site' theme = \"re-learn\" Step 4: Lets add a page to our website The pages should be under the content folder. So we are going to run the below command, it will create a new page in the content folder.\nhugo new pages/my-first-page.md You will find a .md like below in your project. Make sure to remove the draft: true in the file\nLet’s add this text to the file.\nMy first post using Hugo. Step 5: Run the website in our Local Now it’s time to test the website in our local\nRun the following command:\nhugo serve You will notice the following output:\nport 1313 already in use, attempting to use an available port Start building sites … hugo v0.102.3+extended darwin/arm64 BuildDate=unknown | EN -------------------+------ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 186 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Built in 141 ms Watching for changes in /Users/Z001QGD/Dilip/code-with-dilip/mywebsite/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/Z001QGD/Dilip/code-with-dilip/mywebsite/config.toml, /Users/Z001QGD/Dilip/code-with-dilip/mywebsite/themes/re-learn/config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:55102/ (bind address 127.0.0.1) In my machine , the website the running this address http://localhost:55102/\nYou might see a different port in your machine Open a browser and hit the address printed in the console. In my case, it’s this address http://localhost:55102/\nOur brand-new website using the Re-learn theme is ready to use.\nWe are able to notice the Pages section in the sidebar and this aligns to the folder structure inside the content folder.\nClick on the Pages, and then you will be able to notice My First Page that we created in Step 4.\nThis wraps our Website development using Hugo static website generator\nHost the Website using GitHub pages Github pages is a static stite hosting service that takes HTML, CSS and JavaScript files straight from a repository on Github and publishes a website.\nWhy GitHub pages? If you are a developer it’s pretty common to have experience working with Github. This already gives us the advantage to not having to learn another tool or technology. Let’s Host the Website now in GitHub Step 1: Create a public repository The repository name should be «username».github.io\nIn my case, my github username is dilipsundarraj1 , so I am going to create a public repository with this name dilipsundarraj1.github.io\nMake sure the repo name matches the format. Have a simple README.md with a text like below. Step 2: Lets host the README using Pages Let’s navigate to Settings of the repo.\nSettings -\u003e Pages -\u003e Select the \"main\" branch -\u003e Save This should trigger a build and you can check in the Actions tab\nOnce the build completes then you will notice the site being live in this https://dilipsundarraj1.github.io/\nYou will be able to notice the below highlighted section in the Settings page\nHere is our README.md hosted live.\nStep 3: Lets add our Hugo website content to this Github repo Let’s generate the static content of our website that we built using hugo\nNavigate to the mywebsite folder and run the below command:\nhugo You should be able tp notice the below output\n~/Dilip/code-with-dilip/mywebsite (main) » hugo Start building sites … hugo v0.102.3+extended darwin/arm64 BuildDate=unknown | EN -------------------+------ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 186 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 186 ms You should be able to notice all the content in the public folder of our project\nStep 4: Let’s add this content to the github repo we created Clone the dilipsundarraj1.github.io project in to our local\ngit clone git@github.com:dilipsundarraj1/dilipsundarraj1.github.io.git Move the content from mywebsite/public folder to the dilipsundarraj1.github.io folder.\nmv mywebsite/public/* ~/Dilip/code-with-dilip/dilipsundarraj1.github.io Now its time push the copied folders and all the content to the dilipsundarraj1.github.io repo in github\ngit add . git commit -am 'adding all the content' git push This should trigger a build in GitHub , you might be able to notice the same in the Actions tab of the github repo.\nOnce the build completes , navigate to this link https://dilipsundarraj1.github.io/\nCongrats, you have successfully hosted your website that’s built in Hugo using GitHub pages\nConclusion In this article, we have learnt how to build a website using Hugo and successfully host it in GitHub.\n{{ template “_internal/disqus.html” . }}\n",
    "description": "",
    "tags": null,
    "title": "Build a Website Using Hugo \u0026 Host in GitHub Pages",
    "uri": "/own-website/hugo-github-pages/"
  },
  {
    "content": "Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Build Your Own Website",
    "uri": "/own-website/"
  },
  {
    "content": "About Me Hello, I am Dilip I am a Software Engineer \u0026 Tech Savvy who have been building software since 2008\nLearning is fun, but sharing is more fun. The reason why I started this website is to share the technical knowledge I have gained over the years to benefit fellow developers.\nI believe in lifelong learning and sharing what you learnt is the best way to live the life. ",
    "description": "",
    "tags": null,
    "title": "Home",
    "uri": "/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
